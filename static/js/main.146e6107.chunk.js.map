{"version":3,"sources":["components/Editor.js","redux/actionTypes.js","redux/actions.js","components/Previewer.js","components/MarkdownPreviewer.js","MDPApp.js","serviceWorker.js","redux/reducers/mdpReducer.js","redux/reducers/initialInput.js","index.js"],"names":["Editor","props","handleChange","bind","expandEditor","defaultEditor","event","this","updateInput","editorView","defaultView","view","className","id","onClick","type","style","height","onChange","defaultValue","input","React","Component","connect","state","Object","assign","dispatch","target","value","Previewer","convert","expandPreviewer","defaultPreviewer","__html","DOMPurify","sanitize","marked","gfm","breaks","previewerView","dangerouslySetInnerHTML","MarkdownPreviewer","MDPApp","Boolean","window","location","hostname","match","initialState","store","createStore","action","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.146e6107.chunk.js","sourcesContent":["// import react dependency\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n// import action creators for mapDispatchToProps\r\nimport { updateInput, defaultView, editorView } from '../redux/actions';\r\n\r\n// import action types for conditional rendering\r\nimport { EDITOR_VIEW } from '../redux/actionTypes';\r\n\r\n// import css style rules\r\nimport '../App.css';\r\n\r\n// app's presentational component\r\nclass Editor extends React.Component {\r\n    constructor( props ) {\r\n        super( props );        \r\n\r\n        // bind this to function\r\n        this.handleChange = this.handleChange.bind( this );\r\n        this.expandEditor = this.expandEditor.bind( this );\r\n        this.defaultEditor = this.defaultEditor.bind( this );       \r\n    }\r\n\r\n    // onChange listener handles user input in textarea then updates preview\r\n    handleChange( event ) {                \r\n        this.props.updateInput( event );        \r\n    }\r\n\r\n    // onClick listener handles when user wants editor maximized\r\n    expandEditor() {\r\n        this.props.editorView();\r\n    }\r\n\r\n    // onClick listener handles when user wants editor and previewer displayed\r\n    defaultEditor() {\r\n        this.props.defaultView();\r\n    }\r\n\r\n    render() {\r\n        if ( this.props.view === EDITOR_VIEW ) {\r\n            return (\r\n                <div className=\"col-11 container-fluid\" id=\"left-col\"> {/* textarea element with header container for user input */}\r\n                    <div className=\"row justify-content-center\"> {/* container to line up header and textarea */}\r\n                        <div id=\"editor-header\" className=\"row justify-content-between\"> {/* header container to space apart contents with label and icon */}\r\n                            <div className=\"col-4\">Editor</div>\r\n                            <i className=\"fas fa-compress-arrows-alt col-0.5 btn btn-sm btn-secondary\" onClick={this.defaultEditor}></i>\r\n                        </div>\r\n                        {/* textarea for user input with default input supplied */}\r\n                        <textarea id=\"editor\" type=\"text\" style={{ height: '82vh' }} className=\"form-control rounded-0\" onChange={this.handleChange} defaultValue={this.props.input}></textarea>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"col-5 container-fluid\" id=\"left-col\"> {/* textarea element with header container for user input */}                \r\n                    <div className=\"row justify-content-center\"> {/* container to line up header and textarea */}\r\n                        <div id=\"editor-header\" className=\"row justify-content-between\"> {/* header container to space apart label and icon */}\r\n                            <div className=\"col-4\">Editor</div>\r\n                            <i className=\"fas fa-expand-arrows-alt col-0.5 btn btn-sm btn-secondary\" onClick={this.expandEditor}></i>\r\n                        </div>\r\n                        {/* textarea for user input with default input supplied */}\r\n                        <textarea id=\"editor\" type=\"text\" className=\"form-control rounded-0\" onChange={this.handleChange} defaultValue={this.props.input}></textarea>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }        \r\n    }\r\n}\r\n\r\n// convert state from store to props to pass to components \r\nconst mapStateToProps = state => {\r\n    const content = Object.assign( {}, state );\r\n    return content;\r\n};\r\n\r\n// connect dispatch to appropriate listener\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateInput: event => dispatch( updateInput( event ) ),\r\n        editorView: () => dispatch( editorView() ),\r\n        defaultView: () => dispatch( defaultView() )\r\n    }\r\n}\r\n\r\n// export component as default with connected state and dispatch - can rename component when imported\r\nexport default connect( mapStateToProps, mapDispatchToProps )(Editor)","// export action types for use with action creators ect.\r\nexport const UPDATE_INPUT = \"UPDATE_INPUT\";  // user makes changes to textarea\r\nexport const DEFAULT_VIEW = \"DEFAULT_VIEW\";  // reset to default view 2 windows\r\nexport const EDITOR_VIEW = \"EDITOR_VIEW\";  // editor full screen view\r\nexport const PREVIEWER_VIEW = \"PREVIEWER_VIEW\";  // previewer full screen view","// import action type constants\r\nimport { UPDATE_INPUT, DEFAULT_VIEW, EDITOR_VIEW, PREVIEWER_VIEW } from \"./actionTypes.js\";\r\n\r\n// set new input state\r\nexport const updateInput = ( event ) => ({\r\n    type: UPDATE_INPUT,\r\n    input: event.target.value    \r\n})\r\n\r\n// default view\r\nexport const defaultView = () => ({\r\n    type: DEFAULT_VIEW\r\n})\r\n\r\n// editor full screen view\r\nexport const editorView = () => ({\r\n    type: EDITOR_VIEW\r\n})\r\n\r\n// previewer full screen view\r\nexport const previewerView = () => ({\r\n    type: PREVIEWER_VIEW\r\n})","// import react dependency\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n// import action creators for mapDispatchToProps\r\nimport { defaultView, previewerView } from '../redux/actions';\r\n\r\n// import action types for conditional rendering\r\nimport { PREVIEWER_VIEW } from '../redux/actionTypes';\r\n\r\n// import marked library api\r\nimport marked from 'marked';\r\n\r\n// import dom purify library to sanitize converted html\r\nimport DOMPurify from 'dompurify';\r\n\r\n// import css style rules\r\nimport '../App.css';\r\n\r\n// app's presentational component\r\nclass Previewer extends React.Component {\r\n    constructor( props ) {\r\n        super( props );        \r\n\r\n        // bind this to function\r\n        this.convert = this.convert.bind( this );\r\n        this.expandPreviewer = this.expandPreviewer.bind( this );\r\n        this.defaultPreviewer = this.defaultPreviewer.bind( this );\r\n    }\r\n\r\n    // stateless function to convert input to html\r\n    convert( value ) {\r\n        return { __html:DOMPurify.sanitize( marked( value, { gfm: true, breaks: true } ) ) };        \r\n    }\r\n\r\n    // onClick listener handles when user wants previewer maximized\r\n    expandPreviewer() {\r\n        this.props.previewerView();\r\n    }\r\n\r\n    // onClick listener handles when user wants editor and previewer displayed\r\n    defaultPreviewer() {\r\n        this.props.defaultView();\r\n    }\r\n\r\n    render() {\r\n        if ( this.props.view === PREVIEWER_VIEW ) {\r\n            return (\r\n                <div className=\"col-11 container\" id=\"right-col\"> {/* output element with header container for converted user input */}\r\n                    {/* row to align header with content div */}               \r\n                    <div className=\"row justify-content-center\">\r\n                        {/* header with title and icon */} \r\n                        <div id=\"preview-header\" className=\"row justify-content-between\">\r\n                            <div className=\"col-4\">Previewer</div>\r\n                            <i className=\"fas fa-compress-arrows-alt col-0.5 btn btn-sm btn-secondary\" onClick={this.defaultPreviewer}></i>\r\n                        </div>\r\n                        {/* preview output for converted markup */}\r\n                        <div id=\"preview\" dangerouslySetInnerHTML={this.convert( this.props.input )}></div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"col-6 container\" id=\"right-col\"> {/* output element with header container for converted user input */}\r\n                {/* row to align header with content div */}\r\n                    <div className=\"row justify-content-center\">\r\n                        {/* header with title and icon */}\r\n                        <div id=\"preview-header\" className=\"row justify-content-between\">\r\n                            <div className=\"col-4\">Previewer</div>\r\n                            <i className=\"fas fa-expand-arrows-alt col-0.5 btn btn-sm btn-secondary\" onClick={this.expandPreviewer}></i>\r\n                        </div>\r\n                        {/* preview output for converted markup */}\r\n                        <div id=\"preview\" dangerouslySetInnerHTML={this.convert( this.props.input )}></div>\r\n                    </div>                    \r\n                </div>\r\n            );\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n// convert state from store to props to pass to components \r\nconst mapStateToProps = state => {\r\n    const content = Object.assign( {}, state );\r\n    return content;\r\n};\r\n\r\n// connect dispatch to appropriate listener\r\nconst mapDispatchToProps = dispatch => {\r\n    return {        \r\n        previewerView: () => dispatch( previewerView() ),\r\n        defaultView: () => dispatch( defaultView() )\r\n    }\r\n}\r\n\r\n// export component as default with connected state and dispatch - can rename component when imported\r\nexport default connect( mapStateToProps, mapDispatchToProps )(Previewer)","// import react-redux dependancies\r\nimport React from \"react\";\r\nimport { connect } from 'react-redux';\r\n\r\n// import action type constants\r\nimport { EDITOR_VIEW, PREVIEWER_VIEW } from \"../redux/actionTypes.js\";\r\n\r\n// import child components for presentation\r\nimport Editor from \"./Editor\";\r\nimport Previewer from \"./Previewer\";\r\n\r\n// app's presentational component\r\nclass MarkdownPreviewer extends React.Component {\r\n    render() {\r\n        if ( this.props.view === PREVIEWER_VIEW ) {\r\n            return (\r\n                <div id=\"markdown-previewer\" className=\"container-fluid\"> {/* container div to wrap child component */}\r\n                    <Previewer /> {/* render just 1 child the previewer output */}\r\n                </div>                \r\n            );\r\n        } else if ( this.props.view === EDITOR_VIEW ) {\r\n            return (\r\n                <div id=\"markdown-previewer\" className=\"container-fluid\"> {/* container div to wrap children */}\r\n                    <Editor /> {/* render just 1 child the editor input */}\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div id=\"markdown-previewer\" className=\"container-fluid\">\r\n                    {/* <div id=\"markdown-previewer\" className=\"container-fluid\">  {/* container div to wrap component, didn't like the comment before the div */}\r\n                    {/* textarea element for user input */}\r\n                    <div className=\"row\">\r\n                        <Editor /> {/* import editor component for user input */}\r\n                        <Previewer /> {/* import previewer component to output converted user input */}\r\n                    </div>\r\n                </div>                \r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// convert state from store to props to pass to components \r\nconst mapStateToProps = state => {\r\n    const content = Object.assign( {}, state );\r\n    return content;\r\n};\r\n\r\n// export component as default with connected state and dispatch - can rename component when imported\r\nexport default connect( mapStateToProps, null )(MarkdownPreviewer)","// import react dependency\nimport React from 'react';\n// import presentational component\nimport MarkdownPreviewer from \"./components/MarkdownPreviewer.js\";\n// import css style rules\nimport './App.css';\n\n// app's main parent app w/o wrapper basically a container\nexport default function MDPApp() {\n  return (\n    <div className=\"MDPApp\">\n      <h1 id=\"appTitle\">A Simple React Markdown Previewer</h1>\n      <MarkdownPreviewer />\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import action creators\r\nimport { UPDATE_INPUT, DEFAULT_VIEW, EDITOR_VIEW, PREVIEWER_VIEW } from \"../actionTypes.js\";\r\n\r\n// import initial state for initial textarea on first load\r\nimport { initialInput } from './initialInput.js';\r\n\r\n// constant for initial state\r\nconst initialState = {\r\n    input: initialInput,\r\n    view: DEFAULT_VIEW   \r\n};\r\n\r\n// markdown previewer component reducer returns new state with new input and same view or returns same input with new view style or returns original state\r\nexport default ( state = initialState, action ) => {\r\n    switch ( action.type ) {\r\n        // update user input to state\r\n        case UPDATE_INPUT: {            \r\n            return ({\r\n                input: action.input,\r\n                view: state.view                \r\n            });\r\n        }\r\n        // switch to default 2 window view\r\n        case DEFAULT_VIEW: {\r\n            return ({\r\n                input: state.input,\r\n                view: DEFAULT_VIEW\r\n            });\r\n        }\r\n        // editor full screen view\r\n        case EDITOR_VIEW: {\r\n            return ({\r\n                input: state.input,\r\n                view: EDITOR_VIEW\r\n            });\r\n        }\r\n        // previewer full screen view\r\n        case PREVIEWER_VIEW: {\r\n            return ({\r\n                input: state.input,\r\n                view: PREVIEWER_VIEW\r\n            });\r\n        }\r\n        // default no action return current state\r\n        default:\r\n            return state;\r\n    }\r\n}","// export initial state const for first load\r\nexport const initialInput = \r\n`# This creates h1 style headers, don't forget the space!\r\n\r\n## This creates h2 style sub-headers, I'm a bit smaller.\r\n\r\n### Sub-headers get smaller, but I'm not the smallest.\r\n\r\nDisplay some code inline with back ticks like this \\`<ComponentName />\\` to illustrate code or command line input.\r\n\r\nDisplay larger blocks of code with triple back ticks, don't use single quotes\r\n\\`\\`\\`\r\n// This looks like code to me\r\nclass MyComponent extends React.Component {\r\n    constructor( props ) {\r\n        super( props );\r\n\r\n        // bind this to my handler function\r\n        this.onClick = this.onClick.bind( this );\r\n    }\r\n\r\n    // on click handler\r\n    handleClick() {\r\n        this.props.actionDispatcher();\r\n    }\r\n\r\n    // render component\r\n    render() {\r\n        return(\r\n            <div><button onClick={this.handleClick}></div>\r\n        );\r\n    }\r\n}\r\n\\`\\`\\`\r\n\r\nThis is a table header | Another header | Yet another header followed by a divider segment\r\n--- | ----- | ------\r\nnumber of dashes over 3 don't matter | this is the table content btw | here is some more content for you\r\nwe can add some more here | and here to | BUT NOT HERE, NOT EVER...JK :) even here\r\n\r\n#### Do you like lists, well this is how to make them with markdown!\r\n\r\n- unordered list start with \\`-\\`, \\`+\\`, or \\`*\\`\r\n- don't for get the space after\r\n+ switching doesn't matter\r\n* it's still the same list unless you switch to ordered lists\r\n1. the number only matters on the first one\r\n1. the rest fall in line\r\n5. despite what number you use\r\n1. just use a number followed by a \\`.\\` and a space\r\n- this breaks the last list\r\n - nested list work like this\r\n - can we go further?\r\n   - I think we can\r\n     + maybe even further\r\n\r\n> Block Quotes are done like this\r\n> this is the next line in the block quote\r\n\r\n**Wait** can we do more like *bold* to emphasize text.\r\n_italic_ would be nice too.\r\n**_both_** would be too crazy...\r\nbut not as crazy as puns with markdown: ~~eyed~~\r\n\r\nYou can go to the documentation at [your link text goes here!](https://github.github.com/gfm/), to find all the things you can do with markdown.\r\n\r\nBut I don't like to type, how about images to save myself a thousand keypresses?\r\nWe can do that too like this:\r\n\r\n![FCC logo with text: alt text goes here and the source follows](https://jywillia.github.io/react-markdown-previewer/fcc_primary_large.png)`","// import react dependencies\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import css style sheet\nimport './index.css';\n\n// import app wrapper\nimport MDPApp from './MDPApp';\n\n// default service worker\nimport * as serviceWorker from './serviceWorker';\n\n// import redux dependencies\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\n// import reducer functions\nimport mdpReducer from './redux/reducers/mdpReducer.js';\n\n\n// create store to hold app's state\nconst store = createStore( mdpReducer );\n\n// render app wrapper with store connects redux\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <Provider store={store}>\n    <MDPApp />\n  </Provider>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}